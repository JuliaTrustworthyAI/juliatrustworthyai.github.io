{
  "hash": "150122494e9fd73b084c68c0138e6d3a",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"When Causality meets Recourse\"\nsubtitle: \"Counterfactual Explanations through Structural Causal Models\"\ndate: '2024-09-17'\ndescription: |\n    This post introduces a new tool in CounterfactualExplanations.jl, enhancing the package with causal reasoning to generate counterfactual explanations.\nauthor: \n  - name: Jorge Luiz Franco \n    url: https://www.linkedin.com/in/jorgelwyz/\ncategories:\n  - counterfactuals\n  - explainable AI\n  - causality\n  - Julia\nimage: www/intro.png\nexecute:\n  eval: true\n  echo: true\nengine: julia\njulia: \n  exeflags: [\"--project=./\"]\ncode-fold: show\n---\n\n\n\n# Introduction\n\nIn recent years, the need for interpretable and explainable AI has surged, particularly in high-stakes domains. Counterfactual explanations provide a means to understand how changes to input features could alter the outcomes of machine learning models. This blog post presents a new tool in the [CounterfactualExplanations.jl](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl) package, developed during my JSoC (Julia Summer of Code) project, which incorporates causal reasoning into counterfactual generation.\n\n#### Testimonial\n\n> This was an amazing experience, not just experience to contribute to two repositories simultaneously, but also to work with the mantainers of these repos. I learned a lot about the Julia language and the Julia community. This was possible because of the mentorship of Patrick Altmeyer (CounterfactualExplanations) and Moritz Schauer (CausalInference), who guided me throughout the project and are amazing researchers.\n\n# Project Overview\n\nThis project aimed to enhance the CounterfactualExplanations.jl package by infusing it with a robust mathematical foundation for minimal algorithmic recourse, based on the principles of causal reasoning [@karimi2021algorithmic]. \n\n## Key Contributions\n\nDuring the project, I contributed to two key repositories:\n\n1. [CounterfactualExplanations.jl](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl): Developed a new tool for generating counterfactual explanations using causal information. This allows users to generate counterfactuals through causal interventions rather than minimal perturbations, ultimately providing more meaningful insights.\n\n2. [CausalInference.jl](https://github.com/mschauer/CausalInference.jl): Implemented a Structural Causal Model (SCM) structure that extracts information from data, laying the groundwork for the causal reasoning capabilities in [CounterfactualExplanations.jl](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl).\n\n## Theoretical Background {#sec-background}\n\nIn this project, we developed a framework for the MINT Generator: a counterfactual generator based on the Recourse through Minimal\nIntervention (MINT) method proposed by @karimi2021algorithmic.\n\nThe MINT Generator incorporates causal reasoning to achieve algorithmic recourse through minimal interventions. In this sense, the main idea is that just perturbating a black-box model without taking into account the causal relations in the data can lead to misleading recommendations. Here we now shift to a perspective where every feature pertubation is an intervetion in the causal graph of the problem. Leveraging causal relationships, interventions on causal parents automatially lead to potentially useful changes in their causal children. The generator utilizes a Structural Causal Model(SCM) to encode the variables in a way that causal effects are propagated and uses a generic gradient-based generator to create the search path. This has the benefit that any existing gradient-based generator, such as ECCo [@altmeyer2024faithful], Watcher [@wachter2017counterfactual], DiCE [@mothilal2020explaining], and more, can be used with the MINT SCM encoder to generate counterfactual through causal interventions.\n\nThe MINT algorithm minimizes a loss function that combines the causal constraints of the SCM and the distance between the generated counterfactual and the original input. Since we want a gradient-based generator, we need to pass the constrained optimizaiton problem into an unconstrained one and we do this by using the Lagrangian. Initially, as defined in [@karimi2021algorithmic], we aim to aim to find the minimal cost set of actions $A$ (in the form of structural interventions) that results in a counterfactual instance yielding the favorable output from $h$,\n\n$$\n\\begin{aligned}\nA^* \\in \\arg\\min_A \\text{cost}(A; \\mathbf{x}_F)\\\\\n\\textrm{s.t.} \\quad  h(\\mathbf{x}_{SCF}) \\neq h(\\mathbf{x}_F) \\; \\; \\text{,}\\\\\n\\end{aligned} \n$$\n\nwhere $\\mathbf{x}_F$ is the original input, $\\mathbf{x}_{SCF}$ is the counterfactual instance, and $h$ is the black-box model. We use the $\\mathbf{x}_{SCF}$ terminology because the counterfactual is derived from the SCM,\n\n$$\nx_{SCF_i} = \n\\begin{cases}\nx_{F_i} + \\delta_i, & \\text{if } i \\in I \\\\\nx_{F_i} + f_i(\\text{pa}_{SCF_i}) - f_i(\\text{pa}_{F_i}), & \\text{if } i \\notin I  \\; \\; \\text{,}\n\\end{cases} \n$$\n\nwhere $I$ is the set of intervened upon variables, $f_i$ is the function that generates the value of the variable $i$ given its parents, and $\\text{pa}_{SCF_i}$ and $\\text{pa}_{F_i}$ are the parents of the variable $i$ in the counterfactual and original instance, respectively. This closed formula for the decision variable $\\mathbf{x}_{SCF}$ is what makes possible to use a gradient-based generator, since with it the lagrangian is differentiable,\n\n$$\n\\mathcal{L}(A ; \\lambda) = \\text{cost}(A; \\mathbf{x}_F) + \\lambda \\left(h(\\mathbf{x}_{SCF}) - h(\\mathbf{x}_F) \\right) \\; \\; \\text{,}\n$$\n\nor in simple terms and more standard, since $\\lambda$ is constant,\n\n$$\n\\mathcal{L_{\\texttt{MINT}}}(\\mathbf{x}_{SCF}) = \\lambda \\text{cost}(\\mathbf{x}_{SCF}; \\mathbf{x}_F) + \\text{yloss}(\\mathbf{x}_{SCF},y^*) \\; \\; \\text{,}\n$$\n\nwhere $y^*$ is clearly $h(x_F)$ and $\\text{yloss}$ is : \n\n$$\n\\text{yloss}(\\mathbf{x}_{SCF}, y^*) = h \\left(\\left\\{ x_{F_i} + \\delta_i [i \\in I] + \\left(f_i(\\text{pa}_{SCF_i}) - f_i(\\text{pa}_{F_i}) \\right) [i \\notin I] \\right\\}_{i=1}^n \\right) - y^* \\; \\; \\text{.} \n$$\n\n## Implementation\n\nAs mentioned above, this project involved contributions to both [CausalInference.jl](https://github.com/mschauer/CausalInference.jl) and [CounterfactualExplanations.jl](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl). In this section, we will cover both of these. Before we begin, we load all necessary dependencies below:\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing CausalInference\nusing CounterfactualExplanations\nusing CounterfactualExplanations.GenerativeModels\nusing Graphs\nusing GraphRecipes\nusing MultivariateStats\nusing Plots\nusing Random\nRandom.seed!(1)\nusing StatsBase\n```\n:::\n\n\n\n\n\n### Causal Inference\n\nIn terms of implementation, we need to capture the causal relations from the data, which is where [CausalInference.jl](https://github.com/mschauer/CausalInference.jl) comes in. However, before the project, the package did not have a SCM structure, in the sense that the methods just captured the topological Directed Acyclic Graph (DAG) that showed the causality governing the data. There was previously no way to transform graphs into structural causal models. \n\nConsider the following synthetic data:\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nN = 2000 # number of data points\n\nx = randn(N)\nv = x + randn(N)*0.25\nw = x + randn(N)*0.25\nz = v + w + randn(N)*0.25\ns = z + randn(N)*0.25\ndf = (x=x, v=v, w=w, z=z, s=s)\n```\n:::\n\n\n\n\n\nUsing [CausalInference.jl](https://github.com/mschauer/CausalInference.jl), we can use the `ges` method for the causal discovery [@chickering2003optimal] and plot the resulting DAG [@fig-dag]:\n\n\n\n::: {#cell-fig-dag .cell execution_count=1}\n``` {.julia .cell-code}\nest_g, score = ges(df; penalty=1.0, parallel=true)\n\nplt = graphplot(pdag2dag!(est_g), names= [String(k) for k in keys(df)], size=(500,500), nodesize=0.1, fontsize=25)\nsavefig(plt, \"www/intro.png\")\ndisplay(plt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n┌ Warning: Only one thread available\n└ @ CausalInference ~/.julia/packages/CausalInference/ozcj8/src/ges.jl:52\n```\n:::\n\n::: {#fig-dag .cell-output .cell-output-display}\n```{=html}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"500\" height=\"500\" viewBox=\"0 0 2000 2000\">\n<defs>\n  <clipPath id=\"clip110\">\n    <rect x=\"0\" y=\"0\" width=\"2000\" height=\"2000\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M0 2000 L2000 2000 L2000 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip111\">\n    <rect x=\"400\" y=\"199\" width=\"1401\" height=\"1401\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip110)\" d=\"M47.2441 1952.76 L1952.76 1952.76 L1952.76 47.2441 L47.2441 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip112\">\n    <rect x=\"47\" y=\"47\" width=\"1907\" height=\"1907\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1550.3,1680.54 1557.05,1666.27 1563.77,1652 1570.47,1637.76 1577.13,1623.55 1583.73,1609.38 1590.27,1595.26 1596.73,1581.21 1603.09,1567.22 1609.34,1553.32 1615.47,1539.51 1621.46,1525.81 1627.31,1512.22 1632.99,1498.75 1638.5,1485.42 1643.81,1472.24 1648.92,1459.21 1653.82,1446.34 1658.48,1433.65 1662.9,1421.15 1667.07,1408.84 1670.96,1396.74 1674.56,1384.86 1677.87,1373.21 1680.87,1361.79 1683.54,1350.62 1685.88,1339.7 1687.92,1329.02 1689.65,1318.57 1691.1,1308.33 1692.28,1298.3 1693.2,1288.47 1693.88,1278.82 1694.32,1269.35 1694.55,1260.05 1694.58,1250.9 1694.41,1241.89 1694.07,1233.02 1693.57,1224.28 1692.91,1215.64 1692.12,1207.12 1691.21,1198.68 1690.19,1190.33 1689.08,1182.05 1687.88,1173.83 1686.62,1165.66 1685.3,1157.54 1683.94,1149.45 1682.56,1141.37 1681.16,1133.31 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1671.51,1165.43 1681.16,1133.31 1701.07,1160.3 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1681.16,1133.31 1682.56,1141.37 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"675.164,1531.36 694.981,1530.71 714.782,1530.08 734.553,1529.47 754.28,1528.88 773.947,1528.33 793.539,1527.83 813.042,1527.39 832.441,1527.01 851.72,1526.71 870.865,1526.5 889.861,1526.38 908.693,1526.36 927.346,1526.46 945.805,1526.68 964.055,1527.04 982.082,1527.53 999.87,1528.18 1017.4,1528.99 1034.67,1529.98 1051.65,1531.14 1068.34,1532.49 1084.71,1534.04 1100.75,1535.81 1116.45,1537.79 1131.8,1539.99 1146.78,1542.43 1161.43,1545.08 1175.74,1547.95 1189.74,1551.01 1203.45,1554.26 1216.87,1557.7 1230.02,1561.3 1242.92,1565.07 1255.58,1568.98 1268.01,1573.04 1280.24,1577.24 1292.27,1581.56 1304.13,1585.99 1315.82,1590.52 1327.36,1595.15 1338.77,1599.87 1350.05,1604.66 1361.24,1609.52 1372.33,1614.44 1383.35,1619.4 1394.31,1624.4 1405.23,1629.43 1416.11,1634.48 1426.98,1639.54 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1406.11,1613.28 1426.98,1639.54 1393.45,1640.48 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1426.98,1639.54 1416.11,1634.48 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"675.164,1531.36 681.873,1517.04 688.568,1502.73 695.235,1488.44 701.862,1474.19 708.435,1459.97 714.941,1445.81 721.365,1431.71 727.694,1417.68 733.914,1403.74 740.013,1389.88 745.977,1376.14 751.791,1362.5 757.443,1349 762.919,1335.62 768.205,1322.4 773.288,1309.32 778.154,1296.42 782.79,1283.69 787.182,1271.15 791.316,1258.8 795.18,1246.67 798.76,1234.75 802.041,1223.06 805.011,1211.61 807.656,1200.4 809.977,1189.45 811.986,1178.74 813.697,1168.25 815.124,1157.98 816.28,1147.92 817.178,1138.06 817.833,1128.38 818.257,1118.88 818.465,1109.55 818.47,1100.38 818.284,1091.34 817.923,1082.45 817.399,1073.68 816.727,1065.02 815.918,1056.46 814.988,1048 813.95,1039.63 812.816,1031.32 811.602,1023.08 810.319,1014.89 808.983,1006.74 807.606,998.626 806.201,990.529 804.784,982.443 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"795.19,1014.58 804.784,982.443 824.739,1009.4 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"804.784,982.443 806.201,990.529 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1680.54,1006.01 1660.69,1006.61 1640.85,1007.21 1621.04,1007.79 1601.28,1008.34 1581.57,1008.85 1561.95,1009.31 1542.41,1009.72 1522.97,1010.06 1503.66,1010.32 1484.47,1010.5 1465.44,1010.59 1446.58,1010.56 1427.89,1010.43 1409.39,1010.17 1391.11,1009.78 1373.04,1009.25 1355.22,1008.57 1337.65,1007.72 1320.35,1006.71 1303.33,1005.51 1286.62,1004.12 1270.21,1002.54 1254.13,1000.74 1238.4,998.733 1223.02,996.494 1208.01,994.027 1193.33,991.343 1178.98,988.45 1164.95,985.357 1151.22,982.075 1137.76,978.613 1124.58,974.98 1111.65,971.186 1098.96,967.24 1086.5,963.151 1074.24,958.93 1062.18,954.586 1050.29,950.128 1038.57,945.565 1027,940.908 1015.56,936.165 1004.25,931.347 993.034,926.462 981.911,921.52 970.863,916.531 959.874,911.503 948.93,906.448 938.016,901.373 927.117,896.289 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"947.963,922.565 927.117,896.289 960.646,895.377 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"927.117,896.289 938.016,901.373 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"803.878,855.14 790.133,845.742 776.406,836.346 762.715,826.958 749.078,817.579 735.513,808.213 722.038,798.864 708.671,789.535 695.43,780.228 682.333,770.948 669.399,761.698 656.644,752.481 644.088,743.3 631.748,734.159 619.642,725.06 607.788,716.008 596.204,707.005 584.908,698.055 573.918,689.161 563.253,680.327 552.93,671.555 542.967,662.849 533.382,654.213 524.193,645.649 515.419,637.16 507.076,628.751 499.165,620.421 491.668,612.167 484.567,603.985 477.844,595.873 471.481,587.827 465.461,579.843 459.765,571.919 454.375,564.05 449.273,556.235 444.441,548.469 439.861,540.749 435.516,533.072 431.387,525.435 427.455,517.834 423.704,510.266 420.115,502.728 416.67,495.216 413.351,487.727 410.14,480.258 407.02,472.805 403.971,465.366 400.976,457.937 398.017,450.514 395.077,443.094 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"392.186,476.51 395.077,443.094 420.075,465.456 \"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"395.077,443.094 398.017,450.514 \"/>\n<path clip-path=\"url(#clip112)\" d=\"M1697.3 1680.54 L1623.8 1553.24 L1476.81 1553.24 L1403.31 1680.54 L1476.81 1807.84 L1623.8 1807.84 L1697.3 1680.54 L1697.3 1680.54  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1697.3,1680.54 1623.8,1553.24 1476.81,1553.24 1403.31,1680.54 1476.81,1807.84 1623.8,1807.84 1697.3,1680.54 \"/>\n<path clip-path=\"url(#clip112)\" d=\"M822.161 1531.36 L748.663 1404.05 L601.666 1404.05 L528.168 1531.36 L601.666 1658.66 L748.663 1658.66 L822.161 1531.36 L822.161 1531.36  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"822.161,1531.36 748.663,1404.05 601.666,1404.05 528.168,1531.36 601.666,1658.66 748.663,1658.66 822.161,1531.36 \"/>\n<path clip-path=\"url(#clip112)\" d=\"M1827.54 1006.01 L1754.04 878.705 L1607.04 878.705 L1533.54 1006.01 L1607.04 1133.31 L1754.04 1133.31 L1827.54 1006.01 L1827.54 1006.01  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1827.54,1006.01 1754.04,878.705 1607.04,878.705 1533.54,1006.01 1607.04,1133.31 1754.04,1133.31 1827.54,1006.01 \"/>\n<path clip-path=\"url(#clip112)\" d=\"M950.874 855.14 L877.376 727.838 L730.379 727.838 L656.881 855.14 L730.379 982.443 L877.376 982.443 L950.874 855.14 L950.874 855.14  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"950.874,855.14 877.376,727.838 730.379,727.838 656.881,855.14 730.379,982.443 877.376,982.443 950.874,855.14 \"/>\n<path clip-path=\"url(#clip112)\" d=\"M466.457 319.46 L392.958 192.157 L245.962 192.157 L172.463 319.46 L245.962 446.763 L392.958 446.763 L466.457 319.46 L466.457 319.46  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip112)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"466.457,319.46 392.958,192.157 245.962,192.157 172.463,319.46 245.962,446.763 392.958,446.763 466.457,319.46 \"/>\n<circle clip-path=\"url(#clip112)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1550.3\" cy=\"1680.54\" r=\"2\"/>\n<circle clip-path=\"url(#clip112)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"675.164\" cy=\"1531.36\" r=\"2\"/>\n<circle clip-path=\"url(#clip112)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1680.54\" cy=\"1006.01\" r=\"2\"/>\n<circle clip-path=\"url(#clip112)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"803.878\" cy=\"855.14\" r=\"2\"/>\n<circle clip-path=\"url(#clip112)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"319.46\" cy=\"319.46\" r=\"2\"/>\n<path clip-path=\"url(#clip110)\" d=\"M1588.07 1653.52 L1558.77 1692.95 L1589.58 1734.54 L1573.89 1734.54 L1550.3 1702.71 L1526.72 1734.54 L1511.03 1734.54 L1542.49 1692.15 L1513.7 1653.52 L1529.4 1653.52 L1550.88 1682.38 L1572.37 1653.52 L1588.07 1653.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M635.74 1504.34 L649.846 1504.34 L675.164 1572.33 L700.483 1504.34 L714.588 1504.34 L684.207 1585.36 L666.122 1585.36 L635.74 1504.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M1626.18 978.99 L1639.49 978.99 L1656.13 1042.21 L1672.69 978.99 L1688.39 978.99 L1705.03 1042.21 L1721.59 978.99 L1734.9 978.99 L1713.71 1060.01 L1698.01 1060.01 L1680.58 993.602 L1663.07 1060.01 L1647.37 1060.01 L1626.18 978.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M773.17 828.122 L836.393 828.122 L836.393 840.275 L786.336 898.507 L836.393 898.507 L836.393 909.14 L771.362 909.14 L771.362 896.988 L821.419 838.756 L773.17 838.756 L773.17 828.122 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip110)\" d=\"M346.08 294.829 L346.08 307.416 Q340.438 304.522 334.362 303.076 Q328.285 301.629 321.775 301.629 Q311.865 301.629 306.873 304.667 Q301.954 307.705 301.954 313.782 Q301.954 318.411 305.499 321.088 Q309.043 323.692 319.749 326.079 L324.307 327.092 Q338.485 330.13 344.417 335.7 Q350.421 341.198 350.421 351.108 Q350.421 362.392 341.451 368.975 Q332.553 375.558 316.928 375.558 Q310.418 375.558 303.329 374.256 Q296.312 373.026 288.5 370.494 L288.5 356.75 Q295.878 360.584 303.039 362.537 Q310.201 364.418 317.218 364.418 Q326.621 364.418 331.685 361.235 Q336.749 357.98 336.749 352.12 Q336.749 346.695 333.06 343.802 Q329.443 340.908 317.073 338.232 L312.443 337.147 Q300.074 334.542 294.576 329.189 Q289.078 323.764 289.078 314.36 Q289.078 302.931 297.18 296.71 Q305.282 290.489 320.183 290.489 Q327.562 290.489 334.072 291.574 Q340.583 292.659 346.08 294.829 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n```\n\nA simple example of a causal graph.\n:::\n:::\n\n\n\n\n\nGiven the DAG in @fig-dag, our goal is to recover the equations that define the underlying causal relations. The SCM is the union of the DAG and these causal equations: formally, it can be represented as a tuple $(G, \\mathbf{f})$, where $G$ is the DAG and $\\mathbf{f}$ is the set of functions that generates the value of each variable given its parents. \n\nOur solution for constructing the structural causal equations was to assume that the data was generated by a linear model, which in this simple synthetic example actually corresponds to the ground truth. For the DAG provided in the code example we derive\n\n$$ v = \\mathcal{b}_v $$\n\n$$ x = \\mathcal{a}_{v \\to x} v + \\mathcal{b}_x $$\n\n$$ w = \\mathcal{a}_{x \\to w} x + \\mathcal{b}_w $$\n\n$$ z = \\mathcal{a}_{v \\to z} v+ \\mathcal{a}_{w \\to z} w + \\mathcal{b}_z $$\n\n$$ s = \\mathcal{a}_{z \\to s} z + \\mathcal{b}_s $$\n\nand that's the tricky thing, as we can see these causal equations are different than the ones that generated the data, but they are the ones that respect the causal system obtained from the obtained DAG. Here $\\mathcal{b}_i$ and $\\mathcal{a}_{i \\to j}$ are the intercept term and the coefficient obtained from the linear regression, respectively. To correctly solve the linear regression respecting the dependencies of the causal graph, we use `topological_sort_by_dfs` from `Graphs.jl`.\n\nNow, with the SCM structure at hand, we see that the representation could be a struct containing the DAG and the coefficients/intercepts of the causal equations, which corresponds exactly the tuple $(G, \\mathbf{f})$ that we defined. A technical difficulty is that since we aim for gradient-based counterfactual generation, we need to define a differentiable function that takes the SCM and applies the encoded causal relationships to all variables. That is where the `causal_effects` matrix comes to the rescue.\n\nLet the factual vector of features be denoted as:\n\n$$\n\\mathbf{x}_F = \n\\begin{bmatrix}\nx_{F_1} \\\\\nx_{F_2} \\\\\nx_{F_3} \\\\\n\\vdots \\\\\nx_{F_n}\n\\end{bmatrix}\n$$\n\nLet the `causal_effects` matrix be:\n\n$$\n\\mathbf{C} =\n\\begin{bmatrix}\na_{11} & a_{12} & \\cdots & a_{1n} & b_1 \\\\\na_{21} & a_{22} & \\cdots & a_{2n} & b_2 \\\\\na_{31} & a_{32} & \\cdots & a_{3n} & b_3 \\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\na_{n1} & a_{n2} & \\cdots & a_{nn} & b_n \\\\\n\\end{bmatrix}\n$$\n\nHere, $a_{ij}$ represents the coefficient from the causal effect of $x_{F_j}$ on $x_{F_i}$, and $b_i$ represents the intercept term for the variable $x_{F_i}$.\n\nThe matrix multiplication of the `causal_effects` matrix with the factual vector (excluding the bias term) is given by:\n\n$$\n\\mathbf{C}_{:, 1:n} \\cdot \\mathbf{x}_F =\n\\begin{bmatrix}\na_{11} & a_{12} & \\cdots & a_{1n} \\\\\na_{21} & a_{22} & \\cdots & a_{2n} \\\\\na_{31} & a_{32} & \\cdots & a_{3n} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\na_{n1} & a_{n2} & \\cdots & a_{nn}\n\\end{bmatrix}\n\\begin{bmatrix}\nx_{F_1} \\\\\nx_{F_2} \\\\\nx_{F_3} \\\\\n\\vdots \\\\\nx_{F_n}\n\\end{bmatrix}\n$$\n\nFinally, we add the bias term:\n\n$$\n\\mathbf{x}_{SCF} = \\mathbf{C}_{:, 1:n} \\cdot \\mathbf{x}_F + \n\\begin{bmatrix}\nb_1 \\\\\nb_2 \\\\\nb_3 \\\\\n\\vdots \\\\\nb_n\n\\end{bmatrix}\n$$\n\nIn expanded form:\n\n$$\n\\mathbf{x}_{SCF_i} = a_{i1} x_{F_1} + a_{i2} x_{F_2} + \\cdots + a_{in} x_{F_n} + b_i, \\quad \\forall i = 1, 2, \\dots, n\n$$\n\nThis equation shows how each counterfactual variable $x_{SCF_i}$ is generated as a linear combination of the factual inputs $x_{F_j}$ based on the causal effects matrix, with an intercept term $b_i$ added for each variable.\n\nOne can note that the `orphan` nodes, that is, the nodes that do not have parents in the DAG, are going to be equal to the intercept term $\\mathcal{b}_\\hat{o}$. The intuition behind this is that when we do the linear regression, variables that have no causal parents are just equal to the unconditional mean of the variable, i.e, we get $x_{SCF_\\hat{o}} = \\mathbb{E}(x_\\hat{o})$. Because of this, in some cases a better understanding of the regression is needed, so the residuals are also part of the SCM structure,\n\n\n\n::: {#8 .cell execution_count=0}\n``` {.julia .cell-code}\nstruct SCM\n    variables::Vector{String}\n    coefficients::Vector{Vector{Float64}}\n    residuals::Vector{Vector{Float64}}\n    dag::DiGraph\n    causal_effects::Matrix{Float64}\nend\n```\n:::\n\n\n\n\n\n### `CounterfactualExplanations.jl` \n\nNext, we will dive to go into the optimization problem previously described in @sec-background. Recall that we seek to minimize the Lagrangian function we defined where we now have a differentiable function. The standard way to implement generators in `CounterfactualExplanations.jl` is to use autodifferentiation to solve this Lagrangian. The definition of $\\mathcal{L_{\\texttt{MINT}}}$ above is just an unconstrained objective function, much like with any other gradient-based generator in the package, so the optimization is straightforward (see [docs](https://juliatrustworthyai.github.io/CounterfactualExplanations.jl/v1.2/) for more details on gradient-based generators). \n\nA challenge was to find a way to pass the $x_F$ into the $x_{SCF}$. For the time being, we have decided to extend an existing feature of the package, namely `InputTransformer`s: they can be used to transform features, for example, through standardization. All existing `InputTransformer`s work under the premise of encoding features into some latent representation, searching counterfactuals in that latent space, and finally decoding latent features back into the original feature space. In some way, this is also what we are doing here: we are passing our factual to the \"latent\" causal space of the counterfactual. \n\nOur first step is to create a new kind of `InputTransformer` for the SCM:\n\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\nconst TypedInputTransformer = Union{\n    Type{<:StatsBase.AbstractDataTransform},\n    Type{<:MultivariateStats.AbstractDimensionalityReduction},\n    Type{<:GenerativeModels.AbstractGenerativeModel},\n    Type{<:CausalInference.SCM} # The SCM transfromer\n}\n```\n:::\n\n\n\n\n\nNext, we need a way to actually apply train this transformer. This is done by \"overloading\" the `fit_transformer` method, \n\n\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction fit_transformer(\n    data::CounterfactualData, input_encoder::Type{<:CausalInference.SCM}; kwargs...\n)\n    t = Tables.table(transpose(data.X))\n    est_g, score = CausalInference.ges(t; penalty=1.0, parallel=true)\n    est_dag = CausalInference.pdag2dag!(est_g)\n    scm = CausalInference.estimate_equations(t, est_dag)\n    return scm\nend\n```\n:::\n\n\n\n\n\nwhich takes an input `data`set and then relies on [CausalInference.jl](https://github.com/mschauer/CausalInference.jl) for causal discovery. \n\nWe are getting there ... but one implementation challenge is still left: how can we use the learned SCM during the counterfactual search?\n\nOur idea was simple: during each gradient-step, just apply the SCM to all features of the counterfactual. Implementation-wise, this boiled down to overloading the `decode_array` function, which handles the actual decoding step for all `InputTransformers`:\n\n\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction decode_array(data::CounterfactualData, dt::CausalInference.SCM, x::AbstractArray)\n    return run_causal_effects(dt, x)\nend\n\nfunction run_causal_effects(scm::CausalInference.SCM, x::AbstractArray)\n    return scm.causal_effects[:, 1:(end - 1)] * x + scm.causal_effects[:, end] # bias\nend\n```\n:::\n\n\n\n\n\nHere we are! Using this approach, gradient computations explicitly take the causal graph into account. We can now rely on standard workflows for gradient-based generators to solve a different minimization problem that incorporate causal effects.\n\n:::{.callout-note}\n\n## Concrete Generator Type\n\nOne piece that is still missing here is to implement a concrete generator type of the MINT Generator ([#466](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl/issues/466)). That will make it easier for users to use the MINT Generator in the same way as all of our other counterfactual generators. This step has been postponed, because it hinges on an a larger development task ([#435](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl/issues/435)).\n\n:::\n\n## Limitations and Future Work\n\nAltough the range of lines of code was not tremendous, the hard work was. The merged code does not show every research and development I was guided during this time by the mentors. For example, initially we were trying a different approach to work with differentiation inside the `CounterfactualExplanations.jl` package, where the code always broke 😅. But, without this obstacle, we could not have in mind a possible future work where the `run_causal_effects` function could be more flexible. For example, as we said, the variables without causal parents are been assigned just to the unconditional mean, but in terms of counterfactuals theory, maybe using just the factual feature would be more realistic. But to do this we would need to work in the `causal_effects_matrix` and this was part of my work creating `transformable_features` for the SCM where we would probably need to use `ignore_derivatives()` from `Zygote.jl`.\n\n\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction transformable_features(\n    counterfactual_data::CounterfactualData, input_encoder::Type{CausalInference.SCM}\n)\n    g = counterfactual_data.input_encoder.dag\n    child_causal_nodes = [v for v in vertices(g) if indegree(g, v) >= 1]\n    return child_causal_nodes\nend\n```\n:::\n\n\n\n\n\n\n Another direction of future work is that the current implementation of the MINT Generator is limited to linear causal relations. One could extend this to non-linear causal relations, such as those found in neural networks. Additionally, the we could shift the paradigm to use Bayesian Inference to generate the causal equations. This work would be a new extension in `CausalInference.jl`.\n\n## Github PRs and Issues\n\nIn the following links, you can find the PRs and issues that were opened and closed during the project. They show some kind of history of the work developed:\n\n*Causal Inference*:\n\n- [PR1 - SCM](https://github.com/mschauer/CausalInference.jl/pull/155)\n- [PR2 - causal effects matrix](https://github.com/mschauer/CausalInference.jl/pull/157)\n- [PR3 - version Julia register](https://github.com/mschauer/CausalInference.jl/pull/158)\n- [Issue1 - Retrieve equations CausalGraph](https://github.com/mschauer/CausalInference.jl/issues/154)\n\n*CounterfactualExplanations*:\n\n- [PR1 - encondings.jl](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl/pull/461)\n- [PR2 - Constrained Optimization](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl/pull/464)\n- [PR3 - add MINT docs](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl/pull/468)\n- [Issue1 - support for SCM](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl/issues/456)\n- [Issue2 - Constrained Optimization](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl/issues/457)\n- [Issue3 - Document MINT](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl/issues/467)\n\nAnd one that still open: \n\n- [Issue4 - MINTGenerator Interface](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl/issues/466)\n\n# Usage\n\nThe MINT algorithm can be implemented using the `GenericGenerator` and the SCM encoder, that we implement using `CausalInference.jl` package. The following code snippet shows how to use the MINT algorithm to generate counterfactuals using any gradient-based generator:\n\n\n\n::: {#18 .cell execution_count=0}\n``` {.julia .cell-code}\nusing CausalInference\nusing CounterfactualExplanations\nusing CounterfactualExplanations.DataPreprocessing: fit_transformer\nusing Tables\n\nN = 2000\ndf = (\n    x = randn(N), \n    v = randn(N) .^ 2 + randn(N) * 0.25, \n    w = cos.(randn(N)) + randn(N) * 0.25, \n    z = randn(N) .^ 2 + cos.(randn(N)) + randn(N) * 0.25 + randn(N) * 0.25, \n    s = sin.(randn(N) .^ 2 + cos.(randn(N)) + randn(N) * 0.25 + randn(N) * 0.25) + randn(N) * 0.25\n)\ny_lab = rand(0:2, N)\ncounterfactual_data_scm = CounterfactualData(Tables.matrix(df; transpose=true), y_lab)\n\nM = fit_model(counterfactual_data_scm, :Linear)\nchosen = rand(findall(predict_label(M, counterfactual_data_scm) .== 1))\nx = select_factual(counterfactual_data_scm, chosen)\n\ndata_scm = deepcopy(counterfactual_data_scm)\ndata_scm.input_encoder = fit_transformer(data_scm, CausalInference.SCM)\n\nce = generate_counterfactual(x, 2, data_scm, M, GenericGenerator(); initialization=:identity)\n```\n:::\n\n\n\n\n\n\nFor further usage reference access the [MINT official documentation](https://juliatrustworthyai.github.io/CounterfactualExplanations.jl/dev/explanation/generators/mint/).\n\n# Conclusion\n\nDuring this project, I had the opportunity to contribute to both the XAI and Julia communities, where I implemented a SOTA method that used causal information to generate counterfactual explanations [@karimi2021algorithmic]. It was an amazing experience to work with incredible mentors and the community. I would like to once again thank Patrick and Moritz for all their guidance, as well as Jacob Zelko and JuliaHUB for all their support. I learned a lot about the Julia language and the Julia community, and I witnessed firsthand the benefits of Open Source. In fact, it was Open Source that made it possible to contribute to two repositories simultaneously. This experience of working locally on `CounterfactualExplanations.jl` and `CausalInference.jl` was invaluable, as it allowed me to truly understand how things work under the hood.\n\nI hope that the MINT Generator can be useful to the community and that the package continues to be improved in the future. Contributing to a more trustworthy Artificial Intelligence has always been a goal of mine, and even though my contribution may be small, I feel proud to have achieved something meaningful. My wish is to continue contributing to the responsible use of AI. I am very grateful for this opportunity, and I look forward to continuing to contribute to the community. 🚀🚀🚀\n\n# References\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}